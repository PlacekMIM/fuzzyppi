from django.db import models


class PPIScore(models.Model):
    protein1 = models.CharField("Protein 1", max_length=20)
    protein2 = models.CharField("Protein 1", max_length=20)
    score = models.DecimalField("Fuzzy PPI score ", max_digits=7, decimal_places=6)

    class Meta:
        indexes = [
            models.Index(fields=["protein1", "protein2"]),
        ]

    def __str__(self):
        return self.protein1 + "-" + self.protein1 + " = " + str(self.score)


SCORE_THRESHOLDS = [
    [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    ],
    [
        0.000010,
        155101018,
        25275503,
        0.963000,
        0.009000,
        0.673000,
        0.991000,
        0.514000,
        0.763000,
        0.041000,
        0.889000,
        0.959000,
        0.598000,
        "#ff661a"
    ],
    [
        0.000100,
        154560195,
        25816326,
        0.962000,
        0.010000,
        0.674000,
        0.990000,
        0.514000,
        0.762000,
        0.042000,
        0.889000,
        0.958000,
        0.598000,
        "#ff7733",
    ],
    [
        0.001000,
        148640177,
        31736344,
        0.950000,
        0.012000,
        0.676000,
        0.988000,
        0.519000,
        0.752000,
        0.053000,
        0.889000,
        0.947000,
        0.598000,
        "#ff884d",
    ],
    [
        0.010000,
        120473678,
        59902843,
        0.857000,
        0.025000,
        0.695000,
        0.975000,
        0.559000,
        0.674000,
        0.118000,
        0.893000,
        0.882000,
        0.604000,
        "#ffffb3",
    ],
    [
        0.020000,
        100445238,
        79931283,
        0.766000,
        0.036000,
        0.716000,
        0.964000,
        0.599000,
        0.601000,
        0.176000,
        0.897000,
        0.824000,
        0.612000,
        "#ffffb3",
    ],
    [
        0.030000,
        84384625,
        95991896,
        0.673000,
        0.050000,
        0.739000,
        0.950000,
        0.638000,
        0.528000,
        0.232000,
        0.903000,
        0.768000,
        0.620000,
        "#ffffb3",
    ],
    [
        0.040000,
        70915010,
        109461511,
        0.585000,
        0.069000,
        0.761000,
        0.931000,
        0.673000,
        0.456000,
        0.288000,
        0.909000,
        0.712000,
        0.628000,
        "#ffffb3",
    ],
    [
        0.050000,
        59805296,
        120571225,
        0.502000,
        0.090000,
        0.784000,
        0.910000,
        0.704000,
        0.390000,
        0.341000,
        0.915000,
        0.659000,
        0.634000,
        "#ffffb3",
    ],
    [
        0.060000,
        50725562,
        129650959,
        0.429000,
        0.113000,
        0.806000,
        0.887000,
        0.729000,
        0.332000,
        0.392000,
        0.921000,
        0.608000,
        0.636000,
        "#ffffb3",
    ],
    [
        0.070000,
        43432944,
        136943577,
        0.364000,
        0.139000,
        0.826000,
        0.861000,
        0.749000,
        0.281000,
        0.440000,
        0.927000,
        0.560000,
        0.637000,
        "#ffffb3",
    ],
    [
        0.080000,
        37209668,
        143166853,
        0.308000,
        0.165000,
        0.844000,
        0.835000,
        0.763000,
        0.237000,
        0.484000,
        0.933000,
        0.516000,
        0.637000,
        "#ffffb3",
    ],
    [
        0.090000,
        32219592,
        148156929,
        0.261000,
        0.191000,
        0.861000,
        0.809000,
        0.774000,
        0.200000,
        0.526000,
        0.938000,
        0.474000,
        0.638000,
        "#ffffb3",
    ],
    [
        0.100000,
        27810210,
        152566311,
        0.222000,
        0.218000,
        0.876000,
        0.782000,
        0.780000,
        0.168000,
        0.565000,
        0.943000,
        0.435000,
        0.640000,
        "#ffffb3",
    ],
    [
        0.200000,
        6774257,
        173602264,
        0.044000,
        0.511000,
        0.957000,
        0.489000,
        0.723000,
        0.032000,
        0.820000,
        0.973000,
        0.180000,
        0.574000,
        "#d9ffcc",
    ],
    [
        0.300000,
        2236133,
        178140388,
        0.010000,
        0.718000,
        0.983000,
        0.282000,
        0.636000,
        0.007000,
        0.920000,
        0.987000,
        0.080000,
        0.537000,
        "#d9ffcc",
    ],
    [
        0.400000,
        872529,
        179503992,
        0.002000,
        0.837000,
        0.993000,
        0.163000,
        0.580000,
        0.002000,
        0.963000,
        0.993000,
        0.037000,
        0.518000,
        "#d9ffcc",
    ],
    [
        0.500000,
        429050,
        179947471,
        0.001000,
        0.905000,
        0.996000,
        0.095000,
        0.547000,
        0.000800,
        0.982000,
        0.996000,
        0.018000,
        0.509000,
        "#d9ffcc",
    ],
    [
        0.600000,
        182139,
        180194382,
        0,
        0.943000,
        0.998000,
        0.057000,
        0.528000,
        0,
        0.991000,
        0.998000,
        0.009000,
        0.505000,
        "#4dff4d",
    ],
    [
        0.700000,
        80483,
        180296038,
        0,
        0.967000,
        0.999000,
        0.033000,
        0.517000,
        0,
        0.995000,
        0.999000,
        0.005000,
        0.503000,
        "#33ff33",
    ],
    [
        0.800000,
        24458,
        180352063,
        0,
        0.982000,
        1,
        0.018000,
        0.509000,
        0,
        0.997000,
        1,
        0.003000,
        0.501000,
        "#1aff1a",
    ],
    [
        0.900000,
        10184,
        180366337,
        0,
        0.993000,
        1,
        0.007000,
        0.503000,
        0,
        0.999000,
        1,
        0.001000,
        0.501000,
        "#00ff00",
    ],
    [
        0.950000,
        2654,
        180373867,
        0,
        0.997000,
        1,
        0.003000,
        0.501000,
        0,
        1,
        1,
        0,
        0.500000,
        "#00e600",
    ],
    [
        1,
        0,
        180376521,
        0,
        1,
        1,
        0,
        0.500000,
        0,
        1,
        1,
        0,
        0.500000,
        "#00cc00",
    ],
]


def row_to_dictionary(thr, range, arr):
    d = {}
    return {
        "range" : (range, "Fuzzy semantic score range"),
        "interpretation": "NO interaction with high probability" if thr <= 0.001 else "probably NO interaction" if thr <= 0.1 else "interaction is probable" if thr <= 0.6 else "high probability of interaction",
        "style": "isa_error" if thr <= 0.001 else "isa_error" if thr <= 0.1 else "isa_success" if thr <= 0.6 else "isa_success",
        "gold_FPR" : (arr[2], "False possitive rate for gold sample"),
        "gold_FNR": (arr[3], "False negative rate for gold sample"),
        "gold_precision": (arr[4], "Precision for gold sample"),
        "gold_recall": (arr[5], "Recall for gold sample"),
        "gold_auc": (arr[6], "Area under the curve (AUC) for gold sample"),
        "all_FPR": (arr[7], "False possitive rate for all data"),
        "all_FNR": (arr[8], "False negative rate for all data"),
        "all_precision": (arr[9], "Precision for all data"),
        "all_recall": (arr[10], "Recall for all data"),
        "all_auc": (arr[11], "Area under the curve (AUC) for all data"),
        "color": arr[12],
    }


def scores_for_threshold(t):
    for i, v in enumerate(SCORE_THRESHOLDS):
        if t <= v[0]:
            return row_to_dictionary(t, (SCORE_THRESHOLDS[i-1][0] if i > 1 else 0, SCORE_THRESHOLDS[i][0]), SCORE_THRESHOLDS[i][1:]), i
    return None


# get_for_threshold(0)
# get_for_threshold(0.000009)
# get_for_threshold(0.000010)
# get_for_threshold(0.000011)
# get_for_threshold(1)
